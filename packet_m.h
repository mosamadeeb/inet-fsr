//
// Generated file, do not edit! Created by opp_msgtool 6.1 from packet.msg.
//

#ifndef __INET__FSRV2_PACKET_M_H
#define __INET__FSRV2_PACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace inet {
namespace fsrv2 {

class LinkInfo;
class LinkState;
class LSUPacket;

}  // namespace fsrv2
}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/networklayer/contract/ipv4/Ipv4Address_m.h" // import inet.networklayer.contract.ipv4.Ipv4Address


namespace inet {
namespace fsrv2 {

// cplusplus {{
using namespace inet;
// }}

/**
 * Class generated from <tt>packet.msg:11</tt> by opp_msgtool.
 * <pre>
 * class LinkInfo
 * {
 *     \@packetData;
 *     Ipv4Address address;
 *     unsigned long cost = 1;
 * }
 * </pre>
 */
class LinkInfo
{
  protected:
    ::inet::Ipv4Address address;
    unsigned long cost = 1;

  private:
    void copy(const LinkInfo& other);

  protected:
    bool operator==(const LinkInfo&) = delete;

  public:
    LinkInfo();
    LinkInfo(const LinkInfo& other);
    virtual ~LinkInfo();
    LinkInfo& operator=(const LinkInfo& other);
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    virtual const ::inet::Ipv4Address& getAddress() const;
    virtual ::inet::Ipv4Address& getAddressForUpdate() { return const_cast<::inet::Ipv4Address&>(const_cast<LinkInfo*>(this)->getAddress());}
    virtual void setAddress(const ::inet::Ipv4Address& address);

    virtual unsigned long getCost() const;
    virtual void setCost(unsigned long cost);


  public:
    LinkInfo(Ipv4Address address, unsigned long cost);
    bool operator>(const LinkInfo& other) const;
};

/**
 * Class generated from <tt>packet.msg:35</tt> by opp_msgtool.
 * <pre>
 * class LinkState
 * {
 *     \@packetData;
 *     Ipv4Address routerId;
 * 
 *     LinkInfo links[];
 *     simtime_t timestamp = 0; // Time at which link state was generated at source node (node that the address belongs to)
 * }
 * </pre>
 */
class LinkState
{
  protected:
    ::inet::Ipv4Address routerId;
    LinkInfo *links = nullptr;
    size_t links_arraysize = 0;
    ::omnetpp::simtime_t timestamp = 0;

  private:
    void copy(const LinkState& other);

  protected:
    bool operator==(const LinkState&) = delete;

  public:
    LinkState();
    LinkState(const LinkState& other);
    virtual ~LinkState();
    LinkState& operator=(const LinkState& other);
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    virtual const ::inet::Ipv4Address& getRouterId() const;
    virtual ::inet::Ipv4Address& getRouterIdForUpdate() { return const_cast<::inet::Ipv4Address&>(const_cast<LinkState*>(this)->getRouterId());}
    virtual void setRouterId(const ::inet::Ipv4Address& routerId);

    virtual void setLinksArraySize(size_t size);
    virtual size_t getLinksArraySize() const;
    virtual const LinkInfo& getLinks(size_t k) const;
    virtual LinkInfo& getLinksForUpdate(size_t k) { return const_cast<LinkInfo&>(const_cast<LinkState*>(this)->getLinks(k));}
    virtual void setLinks(size_t k, const LinkInfo& links);
    virtual void insertLinks(size_t k, const LinkInfo& links);
    [[deprecated]] void insertLinks(const LinkInfo& links) {appendLinks(links);}
    virtual void appendLinks(const LinkInfo& links);
    virtual void eraseLinks(size_t k);

    virtual ::omnetpp::simtime_t getTimestamp() const;
    virtual void setTimestamp(::omnetpp::simtime_t timestamp);
};

/**
 * Class generated from <tt>packet.msg:44</tt> by opp_msgtool.
 * <pre>
 * packet LSUPacket
 * {
 *     Ipv4Address srcAddress;
 *     LinkState linkStates[];
 * }
 * </pre>
 */
class LSUPacket : public ::omnetpp::cPacket
{
  protected:
    ::inet::Ipv4Address srcAddress;
    LinkState *linkStates = nullptr;
    size_t linkStates_arraysize = 0;

  private:
    void copy(const LSUPacket& other);

  protected:
    bool operator==(const LSUPacket&) = delete;

  public:
    LSUPacket(const char *name=nullptr, short kind=0);
    LSUPacket(const LSUPacket& other);
    virtual ~LSUPacket();
    LSUPacket& operator=(const LSUPacket& other);
    virtual LSUPacket *dup() const override {return new LSUPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const ::inet::Ipv4Address& getSrcAddress() const;
    virtual ::inet::Ipv4Address& getSrcAddressForUpdate() { return const_cast<::inet::Ipv4Address&>(const_cast<LSUPacket*>(this)->getSrcAddress());}
    virtual void setSrcAddress(const ::inet::Ipv4Address& srcAddress);

    virtual void setLinkStatesArraySize(size_t size);
    virtual size_t getLinkStatesArraySize() const;
    virtual const LinkState& getLinkStates(size_t k) const;
    virtual LinkState& getLinkStatesForUpdate(size_t k) { return const_cast<LinkState&>(const_cast<LSUPacket*>(this)->getLinkStates(k));}
    virtual void setLinkStates(size_t k, const LinkState& linkStates);
    virtual void insertLinkStates(size_t k, const LinkState& linkStates);
    [[deprecated]] void insertLinkStates(const LinkState& linkStates) {appendLinkStates(linkStates);}
    virtual void appendLinkStates(const LinkState& linkStates);
    virtual void eraseLinkStates(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LSUPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LSUPacket& obj) {obj.parsimUnpack(b);}


}  // namespace fsrv2
}  // namespace inet


namespace omnetpp {

inline any_ptr toAnyPtr(const inet::fsrv2::LinkInfo *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline inet::fsrv2::LinkInfo *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::fsrv2::LinkInfo>(); }
inline any_ptr toAnyPtr(const inet::fsrv2::LinkState *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline inet::fsrv2::LinkState *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::fsrv2::LinkState>(); }
template<> inline inet::fsrv2::LSUPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::fsrv2::LSUPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET__FSRV2_PACKET_M_H

