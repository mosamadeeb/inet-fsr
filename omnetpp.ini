[General]
ned-path = "../../inet-4.5.4/src/inet;./"

#-----------------------------------------------------------------------------
[Config FsrTest1]
description = Two hosts communicating wirelessly with a network of FSR routers in between them
network = FsrTestNet
sim-time-limit = 90s
#repeat = 30

# Applications
# -----------------------------------------------------
*.hostA.numApps = 1
*.hostA.app[0].typename = "UdpBasicApp"
*.hostA.app[0].destAddresses = "hostB"
*.hostA.app[0].destPort = 5000
*.hostA.app[0].messageLength = 1000B
*.hostA.app[0].sendInterval = exponential(36ms)
*.hostA.app[0].packetName = "UDPData"

*.hostB.numApps = 1
*.hostB.app[0].typename = "UdpSink"
*.hostB.app[0].localPort = 5000

# IPv4 configuration
# -----------------------------------------------------
*.host*.forwarding = true
*.host*.ipv4.arp.typename = "GlobalArp"
*.configurator.config = xml("<config><interface hosts='**' address='10.0.0.x' netmask='255.255.255.0'/><autoroute metric='errorRate'/></config>")
*.configurator.optimizeRoutes = false
*.host*.ipv4.routingTable.netmaskRoutes = ""
*.configurator.addStaticRoutes = false

# MAC
# -----------------------------------------------------
*.host*.wlan[0].typename = "AckingWirelessInterface"
*.host*.wlan[0].mac.fullDuplex = false
*.host*.wlan[0].mac.headerLength = 23B
*.host*.wlan[0].typename = "WirelessInterface"
*.host*.wlan[0].radio.typename = "UnitDiskRadio"
*.host*.wlan[0].mac.typename = "CsmaCaMac"
*.host*.wlan[0].queue.typename = "DropHeadQueue"    # Keep the freshest packets only, as older packets might have invalid routes.
*.host*.wlan[0].queue.packetCapacity = 30           # -1 means infinite capacity.
*.host*.wlan[0].mac.useAck = true

# Radio (range, interference)
# -----------------------------------------------------
*.host*.wlan[0].radio.transmitter.communicationRange = 250m
*.host*.wlan[0].radio.receiver.ignoreInterference = true
#*.host*.wlan[0].radio.transmitter.interferenceRange = 250m
#*.host*.wlan[0].radio.displayInterferenceRange = false
*.hostA.wlan[0].radio.displayCommunicationRange = true
*.hostB.wlan[0].radio.displayCommunicationRange = true

# Network size
*.n = 10

# Link capacity
*.host*.**.bitrate = 8Mbps

# Mobility
# -----------------------------------------------------
*.hostR*.mobility.typename = "RandomWaypointMobility"
*.hostR*.mobility.speed = uniform(10mps, 20mps)
*.hostR*.mobility.waitTime = 3s
*.hostR*.mobility.constraintAreaMinX = 50m
*.hostR*.mobility.constraintAreaMaxX = 850m
*.hostR*.mobility.constraintAreaMinY = 125m
*.hostR*.mobility.constraintAreaMaxY = 525m
*.hostR*.mobility.constraintAreaMinZ = 0m
*.hostR*.mobility.constraintAreaMaxZ = 0m

# Routing
# -----------------------------------------------------
**.routing.typename = "FsrNode"

# Startup time is set in the network NED file so a different value can be assigned to each node.

# This should be adjusted based on the period of scope 1 (neighbor) updates.
# If the timeout is reached, the node will be removed as a neighbor.
**.routing.linkTimeout = 2s

**.routing.scopes = inet::fsrv2::ScopesParam {
    scopes: [
        { scope: 1, period: 500ms },
        { scope: 2, period: 750ms },
        { scope: 3, period: 1000ms }
    ]
    }

# Visualizer
# -----------------------------------------------------
*.visualizer.sceneVisualizer.descriptionFigure = "title"
*.visualizer.mediumVisualizer.displaySignals = true
*.visualizer.physicalLinkVisualizer.displayLinks = true
*.visualizer.dataLinkVisualizer.displayLinks = true
*.visualizer.networkRouteVisualizer.displayRoutes = true
*.visualizer.*LinkVisualizer.lineShift = 0
*.visualizer.networkRouteVisualizer.lineShift = 0
#*.visualizer.physicalLinkVisualizer.packetFilter = "UDPData*"
# *.visualizer.networkRouteVisualizer.packetFilter = "UDPData*"
#*.visualizer.dataLinkVisualizer.packetFilter = ""
*.visualizer.mobilityVisualizer.displayVelocities = true
*.visualizer.mobilityVisualizer.displayMovementTrails = true
